^MAC^Save for Source Control^^~Format=IRIS.S~^RAW
%RO
HL7SiteARMCOutboundREF^MAC^^^0
HL7SiteARMCOutboundREF // ML 01/05/2006 ; HL7 Interface - Outbound REF message creation decision
	quit
 
CheckRefer	;; build segments and message
Refer(table,intNum,trigger,msgtype) new (intNum,link,trigger,table,msgtype,%session,%request,%d,%old,TFORM,LogonUser,forwardnum,fwdcnt)
	set intNum=$get(intNum),link=$get(link),msgtype=$get(msgtype),trigger=$get(trigger),table=$get(table)
	set (intRegMrn,intAdmNum,intDSNum)="" kill queue,^TMP("HL7-OUT",$job)
 
	// remove error messages for job
	if $data(^TMP("HL7-ERR-LINK",link,$job)) do
	.kill ^TMP("HL7-ERR",$job),^TMP("HL7-ERR-LINK",link,$job)
 
	// check link status
	if '$$Init^HL7Create() quit
 
	set intDSNum=intNum
 
	// only if authorised
	set status=""
	&SQL(SELECT DIS_Status INTO :status FROM PA_DischargeSummary WHERE DIS_RowId = :intDSNum)
	if status'="A" quit
 
	// extract required rowids
	set intAdmNum=$order(^PAADMi("DISSUM",intDSNum,"")),intRegMrn=$$AdmPatNum^HL7OutExtract2(intAdmNum)
	if intDSNum=""!(intAdmNum="") quit
 
 	// extract segments required
	kill SEG if '$$Segment^HL7Create(msgtype)
	if $order(SEG(""))="" quit
	set msgtype=$translate(msgtype,"_","^")
 
	// build segment information
	set seg="" for  set seg=$order(SEG(seg)) quit:seg=""  do  quit:fail
	.set detail=##class(websys.StandardTypeItem).GetDescriptionPlus("HL7Segment",$piece(SEG(seg),"^"))
	.set maxlength=$list(detail,2),segment=$piece(SEG(seg),"^"),mandatory=$piece(SEG(seg),"^",2),repeat=$piece(SEG(seg),"^",3),repeatnum=$piece(SEG(seg),"^",4)
 	. // build all other segments normally
	.do BuildSegment(seg) if fail kill ^TMP("HL7-OUT",$job) quit
 
	// add to interface queue
	if $get(HL7("SEND-NOW"))'="Y",$data(queue) do
	.do Queue^HL7Queue(link,msgtype,"","","")
 
	// do not add to interface queue - instant connection/send on job by job basis to Ensemble/external system
	if $get(HL7("SEND-NOW"))="Y",$data(queue) do Send^HL7SendInstant(msgtype)
 
	kill old,curr,array 
	kill queue,^TMP("HL7-OUT",$job)
	quit
 
	// build segment detail
BuildSegment(segcnt) set fail="" kill Repeat,count("PID"),count("PV1")
	set detail=##class(websys.StandardTypeItem).GetDescriptionPlus("HL7Segment",$piece(SEG(segcnt),"^"))
	set maxlength=$list(detail,2),segment=$piece(SEG(segcnt),"^"),mandatory=$piece(SEG(segcnt),"^",2),repeat=$piece(SEG(segcnt),"^",3),repeatnum=$piece(SEG(segcnt),"^",4)
 
	// check all routines for segment label
	set routefound="" for route=1:1:7,"Z" do  if routefound quit
	.for routine="HL7Site"_HL7("OUTCODE")_"Create"_route,"HL7Create"_route do  quit:routefound
	..set LineRoutine="Check"_segment_"^"_routine if $length($text(@LineRoutine),";;")=2 do  quit
	...xecute "s fail=$$"_segment_"^"_routine set routefound=1
	...if fail!'$data(^TMP("HL7-OUT",$job,segment)) quit
	...do Build^HL7Queue(segment,maxlength) kill ^TMP("HL7-OUT",$job,segment)
	... // check for repeatable segments
	...if repeat="Y" do  kill Repeat(segment)
	....set j="" for i=1:1 set j=$order(Repeat(segment,j))  quit:j=""  do  if i=repeatnum quit
	.....merge ^TMP("HL7-OUT",$job,segment)=Repeat(segment,j)
	.....do Build^HL7Queue(segment,maxlength) kill ^TMP("HL7-OUT",$job,segment)
 
	if fail do trace^HL7Trace("*****",$h,"Error building segment "_segment_" in message "_msgtype_" for "_$select(msgtype["ORM":"order ",1:"patient ")_$select(msgtype["ORM":OrdNum,1:RegMrn),"","","INF") quit
	quit



