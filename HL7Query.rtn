^MAC^Save for Source Control^^~Format=IRIS.S~^RAW
%RO
HL7Query^MAC^^^0
HL7Query // ML 20/9/01 ; HL7 interface - process queries
SrcVer ;; $Id: //trak/main/releases/T2020/1/CLXX/rtn/hl7/HL7Query.rtn#1 $
	quit
	// check for site specific code
SiteCode(event) new (link,INT,HL7,ESC,msh,%,%1,%2,%3,%4,port,filedate,event,tracerowid,version,PatNum,OrderNum,CheckAppFac)
	set event=$get(event),SQLCODE=0,(reject,reject("Detail"))=""
	set routine="HL7Site"_HL7("INCODE")_"Query",LineRoutine="Check"_event_"^"_routine do
	.if $length($text(@LineRoutine),";;")=2 xecute "d Query"_event_"^"_routine_"(.reject,"""_event_""")" quit
	.do Query(event)
	quit $select(reject="":"SKIP",1:"AR\"_reject_"\"_$piece(reject("Detail"),"~")_"\"_$piece(reject("Detail"),"~",2))
	&SQL(DECLARE DEM CURSOR FOR SELECT PAPMI_RowId
		FROM PA_PatMas
	       WHERE PAPMI_No = :RegMrn)
 
	&SQL(DECLARE APN CURSOR FOR SELECT PAPMI_RowId
		FROM PA_PatMas
	       WHERE %ALPHAUP(PAPMI_Name) %STARTSWITH :surname AND (%ALPHAUP(PAPMI_Name2) %STARTSWITH :given
	          OR %ALPHAUP(PAPMI_Name3) %STARTSWITH :given))
 
	&SQL(DECLARE APP CURSOR FOR SELECT PAADM_PAPMI_DR, PAADM_RowID
		FROM PA_Adm, CT_CareProv
	       WHERE PAADM_AdmDocCodeDR = CTPCP_RowId AND %ALPHAUP(CTPCP_Desc) %STARTSWITH :name AND PAADM_Current = 'Y' AND
		     (%INTERNAL(PAADM_AdmDate) >= :datefrom OR :datefrom IS NULL) AND
		     (%INTERNAL(PAADM_AdmDate) <= :dateto OR :dateto IS NULL))
 
Query(event) set event=$get(event)
	set (error,err,datefrom,dateto)="",$ztrap="Error" kill ^TMP("HL7-OUT",$job)
	for i=1:1:13 set ^TMP("HL7",$job,"QRF",i)=$get(^TMP("HL7",$job,"QRF",i))
 
	// check for deferred response
	if ^TMP("HL7",$job,"QRD",3)="D" quit ""
	// check for immediate response
	if ^TMP("HL7",$job,"QRD",3)'="I" quit ""
 
	// convert dates
	if ^TMP("HL7",$job,"QRF",2)'="" set datefrom=$zdateh($extract(^TMP("HL7",$job,"QRF",2),1,8),8)
	if ^TMP("HL7",$job,"QRF",3)'="" set dateto=$zdateh($extract(^TMP("HL7",$job,"QRF",3),1,8),8)
 
	// set maximum recs to return (if 0)
	set ^TMP("HL7",$job,"QRD",7)=+^TMP("HL7",$job,"QRD",7) if ^TMP("HL7",$job,"QRD",7)=0 set ^TMP("HL7",$job,"QRD",7)=40
	set max=^TMP("HL7",$job,"QRD",7)
 
	set dept=##class(%Collation).AlphaUp($piece(^TMP("HL7",$job,"QRF",1),%2))
	kill QUERY,PLIST set (QUERY,PLIST)=0
 
	set lookup=$piece(^TMP("HL7",$job,"QRD",9),%2),(intRegMrn,intAdmNum)=""
 
	set x="" for  set x=$order(^TMP("HL7",$job,"QRD",8,x)) quit:x=""  do  if QUERY>^TMP("HL7",$job,"QRD",7) quit
	. // 'ANU' - ward lookup
	.if lookup="ANU" do AnuLook
	. // 'DEM' - mrn lookup
	.if lookup="DEM" do
	..set RegMrn=$piece(^TMP("HL7",$job,"QRD",8,x),%1,1) do Lookup
	. // 'APN' - name lookup
	.if lookup="APN" do
	..set surname=##class(%Collation).AlphaUp($piece(^TMP("HL7",$job,"QRD",8,x),%1,2)),given=##class(%Collation).AlphaUp($piece(^TMP("HL7",$job,"QRD",8,x),%1,3))
	..do Lookup
	. // 'APP' - care provider lookup
	.if lookup="APP" do
	..set name=##class(%Collation).AlphaUp($piece(^TMP("HL7",$job,"QRD",8,x),%1,2)) do Lookup
 
	// build the reply
Build	set ^TMP("HL7-OUT",$job,"MSA",1)="AA"
	set ^TMP("HL7-OUT",$job,"MSA",2)=^TMP("HL7",$job,"MSH",9)
	set ^TMP("HL7-OUT",$job,"MSA",3)=$$Esc^HL7(error)
	if error'="" set ^TMP("HL7-OUT",$job,"MSA",5)=%1_$$Esc^HL7(error)_%1_"Medtrak"
 
	do Build^HL7Queue("MSA",12)
 
	if error="" do
	.merge ^TMP("HL7-OUT",$job,"QRD")=^TMP("HL7",$job,"QRD"),^TMP("HL7-OUT",$job,"QRF")=^TMP("HL7",$job,"QRF")
	.do Build^HL7Queue("QRD",12)
	. // sent QRF if received
	.if ^TMP("HL7-OUT",$job,"QRF",1)'="" do Build^HL7Queue("QRF",9)
	. // return episode list
	.set query="" for  set query=$order(QUERY(query)) quit:query=""  do Reply
 
	// send message immediately
	set trace=1,(trace(1),record)=$$SendHead^HL7Send("ADR^A19")
	write ESC("VT"),record,ESC("CR")
	if $order(queue("")) do
	.set cnt="" for  set cnt=$order(queue(cnt)) quit:cnt=""  write queue(cnt),ESC("CR") set trace=$get(trace)+1,trace(trace)=queue(cnt)
	.write ESC("FS"),ESC("CR"),*-3
 
	do trace^HL7Trace("M-->E",$h,"",tracerowid)
 
	// log error in trace
	if error'="" do trace^HL7Trace("*****",$h,err)
	quit
 
	// 'anu' - ward lookup
AnuLook set error="Not currently supported in Medtrak"
	quit
 
	// 'DEM' - demographic lookup 
	// 'APN' - name lookup
	// 'APP' - care provider lookup
	//
Lookup	if lookup="DEM" do
	. &SQL(OPEN DEM)
	if lookup="APN" do
	. &SQL(OPEN APN)
	if lookup="APP" do
	. &SQL(OPEN APP)
	for i=1:1:max do  quit:SQLCODE
	.if lookup="DEM" do  quit:SQLCODE
	.. &SQL(FETCH DEM INTO :intRegMrn)
	.if lookup="APN" do  quit:SQLCODE
	.. &SQL(FETCH APN INTO :intRegMrn)
	.if lookup="APP" do  quit:SQLCODE
	.. &SQL(FETCH APP INTO :intRegMrn, :intAdmNum)
	.if intRegMrn="" quit
	.set QUERY($increment(QUERY))=$listbuild(intRegMrn,intAdmNum)
	if lookup="DEM" do
	. &SQL(CLOSE DEM)
	if lookup="APN" do
	. &SQL(CLOSE APN)
	if lookup="APP" do
	. &SQL(CLOSE APP)
	quit
 
	// build reply for each item found
Reply	set intRegMrn=$list(QUERY(query),1),intAdmNum=$list(QUERY(query),2),(intRegCheck,msgtype,trigger)=""
	for segment="PID","PD1","PV1","ZID" do
	.set detail=##class(websys.StandardTypeItem).GetDescriptionPlus("HL7Segment",segment),maxlength=$list(detail,2)
	.set table=$select(segment="PV1":"PAADM",1:"PAPERSON"),mandatory="N"
	.set routefound="" for route=1:1:4,"Z" do  if routefound quit
	..for routine="HL7Site"_HL7("OUTCODE")_"Create"_route,"HL7Create"_route do  quit:routefound
	...set LineRoutine="Check"_segment_"^"_routine if $length($text(@LineRoutine),";;")=2 do  quit
	....xecute "s fail=$$"_segment_"^"_routine set routefound=1
	.if fail quit
	.if segment'="ZID" set ^TMP("HL7-OUT",$job,segment,1)=query
	.do Build^HL7Queue(segment,maxlength)
 
	quit
 
	// log errors
Error	set err=$zerror,error="Medtrak internal error - see Medtrak message log"
	do BACK^%ETN
	goto Build



