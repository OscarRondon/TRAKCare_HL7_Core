^MAC^Save for Source Control^^~Format=IRIS.S~^UTF8
%RO
HL7Create^MAC^^^0
HL7Create // ML 02/05/2003 ; HL7 interface : create transmission packets
SrcVer ;; $Id: //trak/main/releases/T2020/1/CLXX/rtn/hl7/HL7Create.rtn#1 $
	quit
	
Check2	;; unsolicited ADT messages
ADT(intNum,link,msgtype,trigger,otherNum) new (intNum,link,msgtype,trigger,otherNum,table,%session,%request,%PDSDATA,old,curr,forwardnum,fwdcnt,TransactionEdit,TRIGGER)
	set intNum=$get(intNum),link=$get(link),msgtype=$get(msgtype),trigger=$get(trigger),otherNum=$get(otherNum),table=$get(table),TransactionEdit=$get(TransactionEdit)
	set (intRegMrn,intRegFrom,intRegTo,intRegCheck,intAdmNum,intAdmFrom,intAdmTo,intAdmCheck,intAdmTransFrom,intAdmTransTo,intWaitNum,intApptNum,SendingFac,LogonHosp)=""
	
	kill queue,^TMP("HL7-OUT",$job)
	
	// remove error messages for job
	if $data(^TMP("HL7-ERR-LINK",link,$job)) do
	. kill ^TMP("HL7-ERR",$job),^TMP("HL7-ERR-LINK",link,$job)
	
	// check link status
	if '$$Init quit
	
	// use forward num only for A47
	if msgtype'["A47" kill forwardnum
	
	set LogonUser=$select($data(%session):$get(%session.Data("LOGON.USERID")),1:"")
	set LogonLocat=$select($data(%session):$get(%session.Data("LOGON.CTLOCID")),1:"") if LogonLocat'="" do
	. &SQL(SELECT CTLOC_Hospital_DR INTO :LogonHosp FROM CT_Loc WHERE CTLOC_RowId = :LogonLocat)
.
	// extract bed swap patient ids and admission ids
	if msgtype["A17" {
		set detail=$piece(intNum,"^")
		set intRegFrom=$piece(detail,"\"),intAdmFrom=$piece(detail,"\",2),intAdmTransFrom=$piece(detail,"\",3)
		set intRegMrn=intRegFrom,intAdmNum=intAdmFrom,intAdmTransNum=intAdmTransFrom
		set detail=$piece(intNum,"^",2)
		set intRegTo=$piece(detail,"\"),intAdmTo=$piece(detail,"\",2),intAdmTransTo=$piece(detail,"\",3)
		set table="PAADM"
	}
	
	// extract 'pat from' and 'pat to' for merge
	if ",A34,A40,"[(","_$piece(msgtype,"_",2)_",") set intRegFrom=$piece(intNum,"||"),intRegTo=$piece(intNum,"||",2),intRegMrn=intRegTo,table="PAPERSON"
	// extract 'pat from' and 'pat to' for unmerge
	if msgtype["A37" set intRegTo=$piece(intNum,"||"),intRegFrom=$piece(intNum,"||",2),intRegMrn=intRegFrom,table="PAPERSON"
	// extract 'hosp from' and 'pat to' for movement
	if msgtype["A43" set intHospFrom=$piece(intNum,"||"),intRegMrn=$$intRegMrnHosp^HL7Common2(intHospFrom)
	// extract 'hosp from' and admission moved
	if msgtype["A45" set intAdmNum=$piece(intNum,"||"),intRegMrn=$piece(intNum,"||",2),intRegFrom=$piece(intNum,"||",3),table="PAADM"
	
	if ",A05,A38,"[(","_$piece(msgtype,"_",2)_",") do  if intRegMrn=""!(intAdmNum="") quit
	. if table'="PAWAITINGLIST",(table'="PAWAITINGLISTADM"),(table'="PAWAITINGLISTTRANSACTION"),(table'="PAWAITINGLISTNOTAVAILABLE"),(table'="PAADM"),(table'="RBAPPOINTMENT"),(table'="PAADMTRANSACTION") quit
	. if table="RBAPPOINTMENT" do
	. . set intApptNum=intNum,intAdmNum=""
	. . if $$ApptAdmPat^HL7OutExtract11(intApptNum,.intAdmNum,"")
	. . if intAdmNum'="" set intWaitNum=$$WaitListExist^HL7OutExtract3(intAdmNum)
	. if table'="PAADM",(table'="PAADMTRANSACTION"),(table'="RBAPPOINTMENT") set intWaitNum=$piece(intNum,"||")
	. if table="PAADMTRANSACTION" set intAdmNum=$piece(intNum,"||"),intRegMrn=$$AdmPatNum^HL7OutExtract2(intAdmNum) quit
	. if table="PAADM" set intWaitNum=$get(curr("PAADM",192)),intRegMrn=$get(curr("PAADM",3))
	. if intRegMrn="" &SQL(SELECT WL_PAPMI_DR INTO :intRegMrn FROM PA_WaitingList WHERE WL_RowId = :intWaitNum)
	. if intRegMrn="" quit
	. if table="PAADM" set intAdmNum=$piece(intNum,"||")
	. if table="PAWAITINGLIST"!(table="PAWAITINGLISTNOTAVAILABLE")!(table="PAWAITINGLISTTRANSACTION") do
	. . // find current booking admission
	. . set (intAdmNum,row)="" for  set row=$order(^PAWL(intWaitNum,"ADM",row),-1) quit:row=""  do  quit:intAdmNum'=""
	. . . set intAdmNum=$piece($get(^PAWL(intWaitNum,"ADM",row)),"^")
	. if table="PAWAITINGLISTADM" do
	. . &SQL(SELECT ADM_PAADM_DR INTO :intAdmNum FROM PA_WaitingListAdm WHERE ADM_RowId = :intNum)
	. . if msgtype["A38",intAdmNum="" set intAdmNum=$get(old(table,3))
	
	// is this a person or admission update
	if ",A05,A08,A17,A28,A31,A34,A37,A38,A40,A43,A47,A60,"'[(","_$piece(msgtype,"_",2)_",") do  if intRegMrn="" quit
	. if table="PAWAITINGLIST"!(table="PAWAITINGLISTADM")!(table="RBAPPOINTMENT") quit
	. if table="RBOPERATINGROOM" do  quit
	. . set intAdmNum=$get(curr("RBOPERATINGROOM",11)) if intAdmNum="" quit
	. . set intRegMrn=$$AdmPatNum^HL7OutExtract2(intAdmNum)
	. . set intOperNum=$get(intNum)
	. set intAdmNum=$piece(intNum,"||")
	. set intRegMrn=$$AdmPatNum^HL7OutExtract2(intAdmNum)
	if ",A28,A31,A60,"[(","_$piece(msgtype,"_",2)_",") do
	. if table="PAPREGDELBABY" do  quit
	. . set intRegMrn=$get(curr(table,85)),intBirthNum=intNum
	. if $data(curr("RTMASTER")) set intRegMrn=$$intRegMrnHosp^HL7Common2($piece(intNum,"||")) quit
	. if $data(curr("RTMVTRANS")) set intRegMrn=$$intRegMrnHosp^HL7Common2($piece(intNum,"||")) quit
	. set intRegMrn=$piece(intNum,"||")
	
	if ",A45,"[(","_$piece(msgtype,"_",2)_",") do
	. &SQL(SELECT ADM_ParRef INTO :intHospFrom FROM RT_MasVolAdm WHERE ADM_PAADM_DR = :intAdmNum)
	. set intHospFrom=$piece($get(intHospFrom),"||")
	
	if ",A47,"[(","_$piece(msgtype,"_",2)_","),$data(old("RTMASTER")) do
	. if $data(old("RTMASTER")),'$data(curr("RTMASTER")) set intRegMrn=$get(old("RTMASTER",3)) quit
	. set intRegMrn=$$intRegMrnHosp^HL7Common2($piece(intNum,"||"))
	
	if ",A08,"[(","_$piece(msgtype,"_",2)_",") do  if intRegMrn=""!(intAdmNum="") quit
	. if table="PATRAFFICACCIDENT"!(table="PATRAFFICACCIDENTCONTACT") do  quit
	. . set intTrafNum=$piece(intNum,"||")
	. . &SQL(SELECT TRF_Person_DR INTO :intRegMrn FROM PA_TrafficAccident WHERE TRF_RowId = :intTrafNum)
	. . if intRegMrn="" quit
	. . // find all admissions associated with accident details and send ADT_A08
	. . set AccAdmType="" for  set AccAdmType=$order(^PAPERdr(intRegMrn,"ADM",AccAdmType)) quit:AccAdmType=""  do
	. . . set intAdmNum="" for  set intAdmNum=$order(^PAPERdr(intRegMrn,"ADM",AccAdmType,intAdmNum)) quit:intAdmNum=""  do
	. . . . set admTrafNum=""
	. . . . &SQL(SELECT PAADM_TrafficAccident_DR INTO :admTrafNum FROM PA_Adm WHERE PAADM_RowId = :intAdmNum)
	. . . . if intTrafNum'=admTrafNum quit
	. . . . // save msgtype
	. . . . set msgtypeSAVE=msgtype
	. . . . do ADTMulti
	. . . . // reinstate msgtype for use on next run through
	. . . . set msgtype=msgtypeSAVE
	. if table="PAWAITINGLIST"!(table="PAWAITINGLISTNOTAVAILABLE")!(table="PAWAITINGLISTTRANSACTION") do  if intAdmNum="" quit
	. . set intWaitNum=$piece(intNum,"||")
	. . // find current booking admission
	. . set (intAdmNum,row)="" for  set row=$order(^PAWL(intWaitNum,"ADM",row),-1) quit:row=""  do  quit:intAdmNum'=""
	. . . set intAdmNum=$piece($get(^PAWL(intWaitNum,"ADM",row)),"^")
	. if table="PAWAITINGLISTADM" do  if intAdmNum="" quit
	. . &SQL(SELECT ADM_PAADM_DR INTO :intAdmNum FROM PA_WaitingListAdm WHERE ADM_RowId = :intNum)
	. if table="MRADM" do  if intAdmNum="" quit
	. . set intAdmNum=$get(curr("MRADM",13))
	. if table="MRDIAGNOS"!(table="MRPROCEDURES") do  if intAdmNum="" quit
	. . set intMRAdm=$piece(intNum,"||")
	. . &SQL(SELECT MRADM_ADM_DR INTO :intAdmNum FROM MR_Adm WHERE MRADM_RowId = :intMRAdm)
	. if table="ORANAESTHESIA"!(table="ORANAESTOPERATION") do
	. . set intAdmNum=$piece(intNum,"||")
	. . if table="ORANAESTHESIA" set intAnaeNum=intNum
	. . if table="ORANAESTOPERATION" set intAnaeOper=intNum
	. if table="RBOPERATINGROOM" do  quit
	. . set intAdmNum=$get(curr("RBOPERATINGROOM",11)) if intAdmNum="" quit
	. . set intRegMrn=$$AdmPatNum^HL7OutExtract2(intAdmNum)
	. . set intOperNum=$get(intNum)
	. if intAdmNum="" do  if intAdmNum="" quit
	. . set (intAdmNum,intRegMrn)="" set intAdmNum=$piece(intNum,"||") if intAdmNum="" quit
	. set intRegMrn=$$AdmPatNum^HL7OutExtract2(intAdmNum)
	
	if table="PATRAFFICACCIDENT"!(table="PATRAFFICACCIDENTCONTACT") quit
	
	if $listget(^websys.ConfigurationD(1),58)'="STG",intRegMrn="" quit
	if $listget(^websys.ConfigurationD(1),58)'="STG" set RegMrn=$$extRegMrn^HL7Common2(intRegMrn)
	if $listget(^websys.ConfigurationD(1),58)="STG" set RegMrn=""
	
	// exclude patients which do not have registration number and med record number (triage)
	set foundnum=""
	// exclude PDS from check
	if $piece($get(^CF("SM",1)),"^",67)="Y" set foundnum=1
	if RegMrn="" do  if $listget(^websys.ConfigurationD(1),58)'="STG",'foundnum quit
	. set intHosp="" for  set intHosp=$order(^RT(0,"PAT",intRegMrn,intHosp)) quit:intHosp=""  do  if foundnum quit
	. . if $piece($get(^RT(intHosp)),"^")'="" set foundnum=1
	set foundnum="",intHosp=""
.
	// allow multiple calls for PA_TrafficAccident* tables
ADTMulti
	
	// extract segments required
	kill SEG if '$$Segment(msgtype)
	if $order(SEG(""))="" quit
	set msgtype=$translate(msgtype,"_","^")
	
	// build segment information
	do BuildSegment if fail kill ^TMP("HL7-OUT",$job) quit
	
	// add to interface queue
	if $get(HL7("SEND-NOW"))'="Y",$data(queue) do
	. do Queue^HL7Queue(link,msgtype,"","",SendingFac)
	
	// do not add to interface queue - instant connection/send on job by job basis to Ensemble/external system
	if $get(HL7("SEND-NOW"))="Y",$data(queue) do Send^HL7SendInstant(msgtype)
	
	kill queue,^TMP("HL7-OUT",$job)
	quit
	
Check5	;; query message
Query(link,msgtype,uniqueid,search,querytype,filter,filtertype,intRegMrn,ReceivingApp,filter2,SessionData) new (link,msgtype,uniqueid,search,querytype,filter,filtertype,intRegMrn,ReceivingApp,filter2,SessionData)
	set link=$get(link),msgtype=$get(msgtype),uniqueid=$get(uniqueid),search=$get(search),querytype=$get(querytype),filter=$get(filter),filtertype=$get(filtertype)
	set intRegMrn=$get(intRegMrn),ReceivingApp=$get(ReceivingApp),filter2=$get(filter2),SessionData=$get(SessionData)
	set LogonUser=$listget(SessionData,1),RoleProfile=$listget(SessionData,2),LogonGroup=$listget(SessionData,3)
.
	// remove error messages for job
	if $data(^TMP("HL7-ERR-LINK",link,$job)) do
	. kill ^TMP("HL7-ERR",$job),^TMP("HL7-ERR-LINK",link,$job)
	
	// check link status
	if '$$Init quit
	
	if HL7("QUERY")'="Y" quit
	
	// extract segments required
	kill SEG if '$$Segment(msgtype)
	if $order(SEG(""))="" quit
	set msgtype=$translate(msgtype,"_","^")
	
	// build segment information
	do BuildSegment if fail kill ^TMP("HL7-OUT",$job) quit
	
	// do not add to interface queue - instant connection on job by job basis to Ensemble/external system
	if $data(queue) do Send^HL7SendQuery(msgtype_"\"_ReceivingApp)
	
	kill queue,^TMP("HL7-OUT",$job)
	quit
	
	// check link status
Init()	set linkstatus=$$Init^HL7,HL7("AUTOSTARTOUT")=$get(HL7("AUTOSTARTOUT"))
	
	lock +^SSHL7(link,"LOCK"):0 if $test do
	. lock -^SSHL7(link,"LOCK") if HL7("AUTOSTARTOUT")'="Y" quit
	. job Start^HL7(link)
	
	quit linkstatus
	
	// extract required segments
Segment(msgtype) new (msgtype,link,SEG) set msgtype=$get(msgtype),cnt="" kill SEG
	if msgtype'="",$data(^SSHL7(link,"MSG-TYPE",msgtype,"SEG")) do
	. set x="" for  set x=$order(^SSHL7(link,"MSG-TYPE",msgtype,"SEG",x)) quit:x=""  set cnt=cnt+1,SEG(cnt)=^(x)
	quit 0
	
	// build segment detail
BuildSegment set (fail,prevsegment)="" kill Repeat,count("PID"),count("PV1")
.
	set seg="" for  set seg=$order(SEG(seg)) quit:seg=""  do  quit:fail
	. set detail=##class(websys.StandardTypeItem).GetDescriptionPlus("HL7SegmentOutbound",$piece(SEG(seg),"^"))
	. set maxlength=$listget(detail,2),segment=$piece(SEG(seg),"^"),mandatory=$piece(SEG(seg),"^",2),repeat=$piece(SEG(seg),"^",3),repeatnum=$piece(SEG(seg),"^",4)
	. // check all routines for segment label
	. set routefound="" for route=0:1:8,"Z" do  if routefound quit
	. . for routine="HL7Site"_HL7("OUTCODE")_"Create"_route,"HL7Create"_route do  quit:routefound
	. . . set LineRoutine="Check"_segment_"^"_routine if $length($text(@LineRoutine),";;")=2 do  quit
	. . . . xecute "s fail=$$"_segment_"^"_routine set routefound=1
	. . . . set prevsegment=segment
	. . . . if fail!'$data(^TMP("HL7-OUT",$job,segment)) quit
	. . . . do Build^HL7Queue(segment,maxlength) kill ^TMP("HL7-OUT",$job,segment)
	. . . . // check for repeatable segments
	. . . . if repeat="Y" do  kill Repeat(segment)
	. . . . . set j="" for i=1:1 set j=$order(Repeat(segment,j))  quit:j=""  do  if i=repeatnum quit
	. . . . . . merge ^TMP("HL7-OUT",$job,segment)=Repeat(segment,j)
	. . . . . . do Build^HL7Queue(segment,maxlength) kill ^TMP("HL7-OUT",$job,segment)
	
	. set errmsg="" if fail do  quit
	. . if msgtype["ORM" set errmsg="Error building segment "_segment_" in message "_msgtype_" for order "_OrdNum quit
	. . if msgtype["ORU" set errmsg="Error building segment "_segment_" in message "_msgtype_" for result "_OrdNum quit
	. . if msgtype["QRY" set errmsg="Error building segment "_segment_" in message "_msgtype quit
	. . set errmsg="Error building segment "_segment_" in message "_msgtype_" for patient "_RegMrn
	. if fail do trace^HL7Trace("*****",$h,errmsg,"","","INF") quit
	
	// check if site specific changes to be made
	if $data(queue) do
	. set routine="HL7Site"_HL7("OUTCODE")_"Modify"
	. set LineRoutine="Check^"_routine if $length($text(@LineRoutine),";;")=2 do  quit
	. . xecute "d Modify^"_routine
	
	quit



